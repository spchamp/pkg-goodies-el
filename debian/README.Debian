Emacs Goodies for Debian
------------------------

This package is created from the `emacs-goodies-el' Debian source package,
which contains a number of Emacs-Lisp files that provide various added
functions to Emacs and/or Gnus.  The source package creates the following
binary packages:

 emacs-goodies-el: Miscellaneous add-ons for Emacs
 emacs-goodies-extra-el:
                   Miscellaneous add-ons for Emacs with extra dependencies 
 gnus-bonus-el:    Miscellaneous add-ons for Gnus
 debbugs-el:       Access the Debian BTS from within Emacs
 dpkg-dev-el:      Emacs-related Debian development helpers
 devscripts-el:    Emacs wrappers for the commands in devscripts

  The numbering scheme for all packages follows the source package scheme:
the major revision number changes when adding or removing files or binary
packages to this source package; the minor revision number changes when
these files have a new upstream release; Debian revision is for packaging
only.

  The file you're currently reading is mostly meant as an introductory
starter for the various goodies included in the various binary
packages obtained from this source package (currently,
emacs-goodies-el, gnus-bonus-el, emacs-goodies-extra-el,
devscripts-el, debbugs-el and dpkg-dev-el).  It does not intend to
replace reading the documentation that is made available in the files
themselves (or not available at all, except insofar as code is
self-documenting).

The package `emacs-goodies-el' comes with Info node `emacs-goodies-el'
(still a work-in-progress) that will document each included files when
it's finished.


Introduction to files in emacs-goodies-el
-----------------------------------------

,----[ nice title ]
| boxquote.el allows the easy creation of boxes that look like this,
| with a nice title and all.  Look for the M-x boxquote-* commands.
`----

align-string.el provides M-x align-string and M-x align-all-strings,
to align vertically the first occurences of a regexp over several
lines.

all.el provides M-x all, a way to see all lines matching a regexp
pattern in a special buffer.  Editing these lines in that buffer
propagates the changes back to the original buffer.

apt-sources.el provides apt-sources-mode, a major mode to help the
edition of /etc/apt/sources.list (and suchlike) files.  To use it,
either open a file named sources.list and it will be autoloaded, or
add a local variables section to the end of your file to specify the
mode to be "apt-sources".

apt-utils.el provides an interface to APT. Start things off using e.g.:
M-x apt-utils-show-package RET emacs21 RET

auto-fill-inhibit.el provides a finer grained control over
auto-fill-mode activation.  Tu use it, simply load the file.  For
instance, adding (load-library "auto-fill-inhibit") to your .emacs
should do the trick.  You'll need to set the auto-fill-inhibit-list
variable to an appropriate value.

bar-cursor.el allows you to change your cursor from a block to a
vertical bar in insert mode, and back to a block in overwrite mode.
Try M-x bar-cursor-mode.

browse-kill-ring.el provides M-x browse-kill-ring.el, to, well, browse
through your kill ring, perform searches on it, and insert items into
a buffer.

clipper.el provides the M-x clipper-* commands to save strings of data
and insert them afterwards.  Each string is labeled with a name, and
can involve some basic template replacement.

coffee.el provides an Emacs interface to RFC2324-compliant coffee
devices

cyclebuffer.el provides M-x cyclebuffer-forward, to switch to other
buffers in the most-recently-visited-first order.  If you accidentally
overshoot, calling cyclebuffer-backward goes back.  You might want to
bind these commands to your favourite keys.

df.el provides M-x df, to display in the mode line space left on
devices.

diminish.el provides M-x diminish, M-x diminish-undo and M-x
diminished-modes.  Diminished modes are minor modes with a shorter or
no modeline display.

dirvars.el provides a functionality similar to the local variables
defined in a file, but for an entire directory tree.  Use (require
'dirvars) in your .emacs to activate it.

egocentric.el provides M-x egocentric-mode, a mode to highlight your
name (or other keywords) in buffers.  If you use Gnus, you might want
to add (add-hook 'gnus-article-prepare-hook 'egocentric-mode) to your
Gnus init file.

ff-paths.el allows you to use C-x C-f normally most of the time,
except that if the requested file doesn't exist, it is checked against
a list of patterns for special paths to search for a file of the same
name.  Use (require 'ff-paths) in your .emacs to activate it.

filladapt.el enhances the behavior of Emacs's fill functions by
guessing the proper fill prefix in many contexts.  Emacs has a
built-in adaptive fill mode but Filladapt is said to be much better.
Use `M-x filladapt-mode' to toggle Filladapt mode on/off in the current
buffer.  Use 'turn-on-filladapt-mode in mode hooks.

floatbg.el provides M-x floatbg-mode, to slowly modify the background
color of your Emacs.

highlight-beyond-fill-column.el highlights (with a face you choose) text
that is beyond the fill-column, therefore providing a visual indication of
where the fill-* functions would wrap the lines.  Enable it on a buffer
using `M-x highlight-beyond-fill-column.'  You may use that command in a
hook (e.g. text-mode-hook)

highlight-current-line.el highlights the line the cursor is in.  Enable a
buffer using the command `M-x highlight-current-line-minor-mode'. You may
enable the minor-mode automatically for (almost) all buffers by

home-end.el provides some useful bindings for Home and End keys: hit the
key once to go to the beginning/end of a line, hit it twice in a row to go
to the beginning/end of the window, three times in a row goes to the
beiginning/end of the buffer.  To enable it, customize the variable
`home-end-enable'.

htmlize.el provides many M-x htmlize-* commands that turn files,
buffers, or region of font-lock colorised text into an HTML
representation.

ibuffer.el is an advanced replacement for the `buffer-menu' which is
normally distributed with Emacs.  Its interface is intended to be
analogous to that of Dired.

initsplit.el allows you to split Emacs customizations (set via M-x
customize) into different files, based on the names of the variables.
To use it, just load the file in your .emacs: (load "initsplit").
Note that that you *must* load each file that contains your various
customizations from your .emacs.

keydef.el provides the `keydef' macro for use in .emacs files (or
similar).  It is an alternative (simpler) way to define keys, with kbd
syntax.  You should read the doc in keydef.el, as it is not intended
for interactive use.

keywiz.el drills you about Emacs key-bindings.  You're presented with
the name of a command and the docstring, and then prompted for the
correct key sequence.  You'll earn one point for each correct answer
during the time limit.  Invoke with `M-x keywiz'.

map-lines.el provides M-x map-lines, a command to iterate a given
command over lines matching a regexp.

mutt-alias.el provides M-x mutt-alias-insert and M-x
mutt-alias-lookup, two commands to lookup and insert the expansion of
mutt mail aliases.

muttrc-mode.el provides muttrc-mode, a major mode to help the edition
of Mutt configuration files.  To use it, either open a file named
muttrc, or add a local variables section to the end of your file to
specify the mode to be "muttrc".

obfusurl.el provides M-x obfuscate-url, a command that will obfuscate
an URL under the cursor.

perldoc.el provides an interface to the "perldoc" command in your
Perl-mode or CPerl-mode buffers.  Use (require 'perldoc) in your
.emacs to activate it, then place point over a word and press F1.

projects.el provides M-x add-project, remove-project and
list-projects, and introduces the concept of PROJECT ROOTS that allow
the user to define logical project names and get abbreviated yet
meaningful buffer names in the modeline.

protbuf.el provides M-x protect-buffer-from-kill-mode and M-x
protect-process-buffer-from-kill-mode, two commands to protect buffers
from being accidentally killed.

protocols.el provides M-x protocols-lookup, to search for info in your
/etc/protocols.

services.el provides M-x services-lookup, to search for info in your
/etc/services.

setnu.el provides M-x setnu-mode, a vi-style line number mode.

silly-mail.el provides M-x add-sm-* commands to add various headers to
your email messages.

sys-apropos.el provides M-x sys-apropos, an interface to the "apropos"
command.

table.el provides a text based table creation and editing feature.
With this package Emacs is capable of editing tables that are embedded
inside a text document, the feature similar to the ones seen in modern
WYSIWYG word processors.  Invoke it with M-x table-insert.  You might
also want to add (add-hook 'text-mode-hook 'table-recognize) to your
.emacs, please read the table.el file for more documentation on this.

tail.el provides the commands M-x tail-file and M-x tail-command, to
follow the output of a command (or to follow a log file) without using
any terminals.

tc.el provides a nice way to quote cited texts, with proper filling
and attribution.  You can use it for instance by setting the cite
function to 'trivial-cite: (setq message-cite-function 'trivial-cite).

thinks.el provides cartoon-like think bubbles . o O ( like this ).
Look for M-x thinks* commands.

tld.el provides M-x tld, for easy access to all those top-level
domains you just can't remember, and to the corresponding countries.

todoo.el provides M-x todoo and M-x todoo-mode, to conveniently edit
TODO lists.

toggle-buffer.el provides M-x joc-toggle-buffer, a command that can be
bound to a key in order to speed up the switching between two buffers.

toggle-case.el provides a sophisticated (over-engineered?) set of
functions to toggle the case of the character under point, with which
you can emulate vi's ~ function.  Look for the M-x joc-toggle-case and
M-x joc-toggle-case-* commands.

toggle-option.el provides M-x toggle-option, a command to rapidly
toggle an option.  You should set the toggle-option-list variable to
an appropriate value.

twiddle.el provides mode-line hacks.  There are two user commands of
interest: twiddle-start and twiddle-compile.

under.el provides M-x underline-region, to underline a bit of text
with ^ characters like this.
                  ^^^^^^^^^

wdired.el provides M-x wdired-change-to-wdired-mode (when in a dired
buffer) and allows you to edit the filenames and permission bits
easily.

nuke-trailing-whitespace.el (renamed from whitespace.el) provides M-x
nuke-trailing-whitespace, a command that deletes trailing whitespaces in
buffers.

xrdb-mode.el provides the xrdb-mode major mode, to help you editing X
resource database files.  To use it, simple open a file named
.Xdefaults, .Xenvironment, .Xresources or *.ad.


Introduction to files in gnus-bonus-el
--------------------------------------

gnus-junk.el provides a semi-automated way to deal with unsolicited
commercial e-mail (also known as "spam").  It provides the M-x
gnus-junk-complain command (use it in your *Summary* buffer).

gnus-outlook-deuglify.el removes some of the ugliness introduced by
Outlook (and maybe other agents too) users in the quoting that appears
in their answers.  To use: add (require 'gnus-outlook-deuglify) to
your Gnus and you're enabled to press `W k' in the Summary Buffer.

message-x.el provides customizable completion in message headers.  Add
(require 'message-x) to your .gnus.

nnir.el provides the nnir backend, to search mail with various search
engines.  Add (require 'nnir) to your .gnus.

nnmaildir.el provides the nnmaildir backend.  Add (require 'nnmaildir)
to your .gnus.

nnnil.el provides an empty, read-only backend for Gnus.  This backend
is suitable for use as the primary server when real servers are to be
secondary or foreign.  Add (require 'nnnil) to your .gnus.

nntodo.el provides a backend to manage todo items with Gnus.  Each
todo item is a message.  Add (require 'nntodo) to your .gnus.

spam-stat.el performs spam detection based on statistics.  To use, add
(require 'spam-stat) and (spam-stat-load) to your .gnus file, use the
spam-stat-buffer-is-spam and spam-stat-buffer-is-non-spam functions
(or spam-stat-buffer-change-to-spam and
spam-stat-buffer-change-to-non-spam) in the appropriate buffers, and
add the rule (: gnus-spam-stat-split) to `nnmail-split-fancy'.


Introduction to files in emacs-goodies-extra-el
-----------------------------------------------

dict.el is an Emacs wrapper around `dict' command to provide access to
a dictd server from within Emacs.  The package provides several
(customisable) key bindings, here are two of the default ones: `C-c d
d' runs dict on the word at point.  `C-c d r' runs dict on region as a
single word.


Introduction to files in devscripts-el
--------------------------------------

devscripts.el provides M-x debuild, M-x debc and M-x debi, three
commands to call the corresponding utilities from within Emacs.


Introduction to files in debbugs-el
-----------------------------------

debian-bug.el provides M-x debian-bug (and variants), to submit bugs
to the Debian bug tracking system.

gnus-BTS.el makes bug numbers clickable in messages viewed in Gnus.
It expects to see bug references in the form of (for example):
"#48273", "closes: 238742" or similar.  To use, add the following to
your .gnus: "(require 'gnus-BTS)".


Introduction to files in dpkg-dev-el
------------------------------------

debian-bts-control.el provides an interface for composing email messages to
the Debian BTS control interface (control@bugs.debian.org).  Tab completions
works for all possible commands and their options.

debian-changelog-mode.el provides a mode for editing debian/changelog
files.  This mode adds colouring, a few commands to manipulate
changelog entries and bug reports, and a nice filling function.  This
mode can also be used to add colours to buffers visiting the
changelogs in /usr/share/doc/<package>/changelog.Debian files.

debian-copyright.el provides a mode for editing debian/copyright files.
This mode adds a bit of colouring and if `goto-addr' is loaded, it will
make the URLs clickable.

debian-control-mode.el provides a mode for editing debian/control
files.  This mode adds a bit of colouring, a working filling function
(bound to "M-q" by default), tab-completion for adding fields (bound
to "C-c C-a" by default), and viewing bugs (bound to "C-c C-b").

readme-debian.el provides readme-debian-mode, a major mode to
highlight README.Debian files.

 -- Peter S Galbraith <psg@debian.org>, Sat Sep 20 18:34:20 2003
