--- a/elisp/emacs-goodies-el/tc.el
+++ b/elisp/emacs-goodies-el/tc.el
@@ -79,6 +79,12 @@
 ;; start and (mark t) at end.
 
 ;;; Code:
+;; https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=841059
+;; Fix by Gijs Hillenius <gijs@hillenius.net>
+(eval-when-compile
+  (when (< emacs-major-version 25)
+    (defmacro save-mark-and-excursion (&rest body)
+      `(save-excursion ,@body))))
 
 ;;; ************************************************************
 ;;; External requirements here
@@ -394,7 +400,7 @@
 (defun tc-do-remove-sig ()
   "Attempt to remove the signature from already quoted text.
 Warns if it is longer than 4 lines (5 including signature mark '-- ')."
-  (save-excursion
+  (save-mark-and-excursion
     (setq tc-removed-sig nil)
     (setq tc-removed-sig-marker nil)
     (exchange-point-and-mark)
@@ -413,7 +419,7 @@
   "Make the signature be after filling in undo list, and quoted."
   (if tc-removed-sig
       (progn
-	(save-excursion
+	(save-mark-and-excursion
 	  (goto-char (marker-position tc-removed-sig-marker))
 	  (insert tc-removed-sig)
 	  (let ((sig-end (point-marker)))
@@ -447,7 +453,7 @@
 Replaces any sequence of cite-marks such as \"> |: }\" with a uniform string
 of the citemarks of your choice, e.g. \">>>> \"."
   (interactive "r")
-  (save-excursion
+  (save-mark-and-excursion
     (goto-char start)
     (let ((end-marker (set-marker (make-marker) end)))
       (while (< (point) (marker-position end-marker))
@@ -479,7 +485,7 @@
 (defun tc-remove-trailing-whitespace ()
   "Remove trailing whitespace."
   ;; First remove trailing empty lines
-  (save-excursion
+  (save-mark-and-excursion
     (if (< (point) (mark t))
 	(exchange-point-and-mark))
     (let ((end-cite (point)))
@@ -543,7 +549,7 @@
   "*Cite the region like `trivial-cite', but without parsing headers.
 Doesn't cut the signature either.  Region is between START and END."
   (interactive "r")
-  (save-excursion
+  (save-mark-and-excursion
     (if (> start end)
 	(let ((tmp start)) (setq start end) (setq end tmp)))
     (goto-char start)
@@ -572,7 +578,7 @@
 
 (defun tc-fix-final-newline ()
   "Add a newline if there is not one at the end of the cited text."
-  (save-excursion
+  (save-mark-and-excursion
     (exchange-point-and-mark)
     (if (not (bolp))
 	(insert "\n"))))
@@ -594,7 +600,7 @@
 Customization:  See variables tc-fill-column, tc-remove-signature,
 tc-citation-string, tc-make-attribution and tc-header-funs."
   (run-hooks 'tc-pre-hook)
-  (save-excursion
+  (save-mark-and-excursion
     (if (< (mark t) (point)) (exchange-point-and-mark))
     (let ((start (point)))
       ;; Initialize some fields
@@ -617,7 +623,7 @@
 	  (tc-do-remove-sig))
       (tc-remove-trailing-whitespace)
       (if tc-max-lines
-	  (save-excursion
+	  (save-mark-and-excursion
 	    (message (concat "Only citing "
 			     (int-to-string tc-max-lines) " lines"))
 	    (goto-char start)
@@ -663,7 +669,7 @@
 paragraph."
   (interactive "nLength of citation marks: ")
   (let (fill-end)
-    (save-excursion
+    (save-mark-and-excursion
       (save-restriction
 	(beginning-of-line)
 	(let ((cite-marks (buffer-substring (point) (+ (point) cite-len)))
@@ -740,7 +746,7 @@
   "Find the length of the citation marking at point P.
 This is so we can fix it when filling.
 Used internally in `tc-fill-cited-text'."
-  (save-excursion
+  (save-mark-and-excursion
     (goto-char p)
     (forward-line 1)
     (let ((forward-prefix-length (tc-line-common-prefix-length p (point))))
@@ -773,7 +779,7 @@
 Done on region between START and END.
 Uses a seperate undo-mechanism (with overlays) to allow partial undo."
   (interactive "r")
-  (save-excursion
+  (save-mark-and-excursion
     (goto-char start)
     (while (< (point) end)
       (beginning-of-line)
@@ -797,7 +803,7 @@
 (defun tc-line-common-prefix-length (p1 p2)
   "Return the number of characters the two lines have as common prefix.
 The two lines are at point P1 and P2."
-  (save-excursion
+  (save-mark-and-excursion
     (let ((line1 (progn (goto-char p1) (beginning-of-line)
 			(let ((line-start (point)))
 			  (end-of-line)
@@ -824,7 +830,7 @@
 marks, as it regards the shortest common prefix of the lines as citation
 marks."
   (interactive "r")
-;;(save-excursion
+;;(save-mark-and-excursion
   (goto-char start)
   (beginning-of-line)
   (let ((line-start (point)))
@@ -851,7 +857,7 @@
 This function finds the longest possible citemark and wraps all lines as
 if they had that amount of citemarks."
   (interactive "r")
-;;(save-excursion
+;;(save-mark-and-excursion
   (goto-char end)
   (let ((end-mark (point-marker))
 	(cite-marks ""))
@@ -897,7 +903,7 @@
   (interactive "d")
   (let ((reformatted (get-char-property at 'tc-reformat)))
     (if reformatted
-	(save-excursion
+	(save-mark-and-excursion
 	  (let ((removed-region (buffer-substring
 				 (overlay-start (cdr reformatted))
 				 (overlay-end (cdr reformatted)))))
@@ -923,7 +929,7 @@
     (substring known-marks (length (concat "\n " tc-normal-citemarks)))))
 
 (defun tc-guess-cite-marks ()
-  (save-excursion
+  (save-mark-and-excursion
     (let ((best-prefix "\n")
 	  guessed-marks
 	  marks-begin marks-end)
@@ -948,7 +954,7 @@
       guessed-marks)))
 
 (defun tc-citemarks-need-guessing ()
-  (save-excursion
+  (save-mark-and-excursion
     (let ((max-line-len (- (tc-fill-column) (length tc-citation-string) 1))
 	  needed)
       (beginning-of-line)
@@ -967,7 +973,7 @@
 ;; Doesn't work yet.  *sniff*
 (defun tc-reply-to-citee-p (email)
   "Whether the mail being composed is for the person being cited."
-  (save-excursion
+  (save-mark-and-excursion
     (beginning-of-buffer)
     (if (re-search-forward "^To:[ \t]+\\(.*\\)\n" nil t)
 	(if (equal email (buffer-substring (match-beginning 1) (match-end 1)))
