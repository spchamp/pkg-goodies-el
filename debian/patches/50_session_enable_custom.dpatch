#!/bin/sh -e
## 50_session_enable_custom.dpatch by Peter S Galbraith <psg@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch}"

case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0

@DPATCH@
diff -urNad /home/psg/emacs/emacs-goodies-el/emacs-goodies-el/elisp/emacs-goodies-el/session.el emacs-goodies-el/elisp/emacs-goodies-el/session.el
--- /home/psg/emacs/emacs-goodies-el/emacs-goodies-el/elisp/emacs-goodies-el/session.el	2003-10-05 20:15:00.000000000 -0400
+++ emacs-goodies-el/elisp/emacs-goodies-el/session.el	2003-10-05 20:29:09.000000000 -0400
@@ -53,7 +53,8 @@
 
 ;; Put this file into your load-path and the following into your ~/.emacs:
 ;;   (require 'session)
-;;   (add-hook 'after-init-hook 'session-initialize)
+;; and customize the variable `session-initialize; to some non-nil value.
+
 
 ;; If you want to use both desktop and session, use:
 ;;   (setq desktop-globals-to-save '(desktop-missing-file-warning))
@@ -192,7 +193,7 @@
 		  :help-echo "Initialize package Session."
 		  :action session-initialize))
 
-(defcustom session-initialize t
+(defcustom session-initialize nil
   "Whether/what to initialize with `session-initialize'.
 If t, do full initialization.  Otherwise, the value should be a list
 with element.  To enable, include
@@ -202,14 +203,20 @@
  * `places' to store and use places for files/buffers,
  * `keys' to setup the default key and mouse bindings,
  * `menus' to setup the menus."
-  :group 'session-miscellaneous
-  :type '(choice (const :tag "All" t)
+  :group 'session
+  :type '(choice (const :tag "Not used" nil)
+                 (const :tag "All" t)
 		 (set :value (de-saveplace session places keys menus)
 		      (const :tag "De-install saveplace" de-saveplace)
 		      (const :tag "Load/Save Session" session)
 		      (const :tag "Store/Use Places" places)
 		      (const :tag "Setup Key/Mouse Bindings" keys)
-		      (const :tag "Setup Menus" menus))))
+		      (const :tag "Setup Menus" menus)))
+  :require 'session
+  :set (lambda (symbol value)
+         (set-default symbol value)
+         (when value
+           (add-hook 'after-init-hook 'session-initialize))))
 
 
 ;;;===========================================================================
