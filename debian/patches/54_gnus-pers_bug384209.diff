#! /bin/sh /usr/share/dpatch/dpatch-run
## 54_gnus-pers_bug384209.dpatch by  <psg@mixed.dyndns.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad emacs-goodies-el~/elisp/gnus-bonus-el/gnus-pers.el emacs-goodies-el/elisp/gnus-bonus-el/gnus-pers.el
--- emacs-goodies-el~/elisp/gnus-bonus-el/gnus-pers.el	2007-09-17 22:10:14.000000000 -0400
+++ emacs-goodies-el/elisp/gnus-bonus-el/gnus-pers.el	2007-09-17 22:11:38.000000000 -0400
@@ -69,6 +69,10 @@
 ;   `gnus-personalities-replace-in-string' after removing the calls to
 ;   check-argument-type.  This was listed in the Todo list.
 
+;; 1.3 Elias Oltmanns <oltmanns@uni-bonn.de>
+;; Reported and fixed Debian bug #384209
+;; `Cc-fix feature in gnus-pers is horribly broken'
+
 ;Todo:
 ; + redo x-tra headers to be a repeat list of two parts, header name
 ; and header data. Then allow either to be a function.
@@ -82,6 +86,8 @@
 
 (eval-when-compile (require 'cl))
 (require 'nnmail)
+(autoload 'rmail-dont-reply-to "mail-utils")
+(autoload 'gnus-extract-address-components "gnus-util")
 
 ;; Variable setup
 
@@ -306,39 +312,6 @@
 
 (define-key message-mode-map "\C-c\C-p" 'gnus-personality-choose)
 
-(defun gnus-personality-replace-in-string (str regexp newtext &optional literal)
-  "Replace all matches in STR for REGEXP with NEWTEXT string,
- and returns the new string.
-Optional LITERAL non-nil means do a literal replacement.
-Otherwise treat `\\' in NEWTEXT as special:
-  `\\&' in NEWTEXT means substitute original matched text.
-  `\\N' means substitute what matched the Nth `\\(...\\)'.
-       If Nth parens didn't match, substitute nothing.
-  `\\\\' means insert one `\\'.
-  `\\u' means upcase the next character.
-  `\\l' means downcase the next character.
-  `\\U' means begin upcasing all following characters.
-  `\\L' means begin downcasing all following characters.
-  `\\E' means terminate the effect of any `\\U' or `\\L'.
-
-This is mostly copied from XEmacs' replace-in-string because Emacs doesn't
-have that function."
-  (if (> (length str) 50)
-      (let ((cfs case-fold-search))
-	(with-temp-buffer
-          (setq case-fold-search cfs)
-	  (insert str)
-	  (goto-char 1)
-	  (while (re-search-forward regexp nil t)
-	    (replace-match newtext t literal))
-	  (buffer-string)))
-  (let ((start 0) newstr)
-    (while (string-match regexp str start)
-      (setq newstr (replace-match newtext t literal str)
-	    start (+ (match-end 0) (- (length newstr) (length str)))
-	    str newstr))
-    str)))
-
 (defun gnus-personality-use (&optional personality)
   "Use a personality defined in gnus-personalities."
   (interactive)
@@ -504,27 +477,19 @@
 	  ; Now we have a problem with Cc when doing a followup. So let's check the Cc field and see if from is there:
 	  (save-excursion
 	    (save-restriction
-	      (message-goto-cc) ;; Yes, yes. This inserts a Cc: if there's nothing there. No worries.
-	      (beginning-of-line)
-	      (let ((beg (point))
-		    (email (gnus-personality-replace-in-string from "\"" "")))
-		(end-of-line)
-		(narrow-to-region beg (point))
-	      (goto-char (point-min))
-	      ; " mess me up.
-	      (while (search-forward "\"" nil t)
-		(replace-match "")
-		)
-	      (goto-char (point-min))
-		(if (search-forward email nil t)
-		    (let* ((end (match-end 0))
-			   (start (match-beginning 0)))
-		      (delete-region start end))) ; Excellent. Now we need to check for a blank line.
-		(unless (re-search-forward ".*@.*" nil t)
+	      (message-narrow-to-head)
+	      (let ((case-fold-search t)
+		    (rmail-dont-reply-to-names
+		     (regexp-quote
+		      (cadr (gnus-extract-address-components from))))
+		    (cc (message-fetch-field "cc")))
+		(when (and cc
+			   (string-match rmail-dont-reply-to-names cc))
+		  (message-remove-header "cc")
 		  (widen)
-		  (forward-line 1)
-		  (beginning-of-line)
-		  (delete-region beg (point)))
+		  (unless (string= "" (setq cc (rmail-dont-reply-to cc)))
+		    (message-goto-cc)
+		    (insert cc)))
 
 	      )
 	    )
@@ -652,27 +617,19 @@
 	  ; Now we have a problem with Cc when doing a followup. So let's check the Cc field and see if from is there:
 	  (save-excursion
 	    (save-restriction
-	      (message-goto-cc) ;; Yes, yes. This inserts a Cc: if there's nothing there. No worries.
-	      (beginning-of-line)
-	      (let ((beg (point))
-		    (email (gnus-personality-replace-in-string from "\"" "")))
-		(end-of-line)
-		(narrow-to-region beg (point))
-	      (goto-char (point-min))
-	      ; " mess me up.
-	      (while (search-forward "\"" nil t)
-		(replace-match "")
-		)
-	      (goto-char (point-min))
-		(if (search-forward email nil t)
-		    (let* ((end (match-end 0))
-			   (start (match-beginning 0)))
-		      (delete-region start end))) ; Excellent. Now we need to check for a blank line.
-		(unless (re-search-forward ".*@.*" nil t)
+	      (message-narrow-to-head)
+	      (let ((case-fold-search t)
+		    (rmail-dont-reply-to-names
+		     (regexp-quote
+		      (cadr (gnus-extract-address-components from))))
+		    (cc (message-fetch-field "cc")))
+		(when (and cc
+			   (string-match rmail-dont-reply-to-names cc))
+		  (message-remove-header "cc")
 		  (widen)
-		  (forward-line 1)
-		  (beginning-of-line)
-		  (delete-region beg (point)))
+		  (unless (string= "" (setq cc (rmail-dont-reply-to cc)))
+		    (message-goto-cc)
+		    (insert cc)))
 
 	      )
 	    )
