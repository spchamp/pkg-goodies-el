#!/bin/sh -e
## debian/patches/51_perl-doc-rewrite.dpatch by Peter S Galbraith <psg@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch}"

case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0

@DPATCH@
diff -urNad /home/psg/emacs/emacs-goodies-el/emacs-goodies-el/elisp/emacs-goodies-el/perldoc.el emacs-goodies-el/elisp/emacs-goodies-el/perldoc.el
--- /home/psg/emacs/emacs-goodies-el/emacs-goodies-el/elisp/emacs-goodies-el/perldoc.el	2003-10-05 22:06:19.000000000 -0400
+++ emacs-goodies-el/elisp/emacs-goodies-el/perldoc.el	2003-10-05 22:06:35.000000000 -0400
@@ -2,7 +2,7 @@
 
 ;;
 ;; Copyright (C) 2000-2002 Steve Kemp <skx@tardis.ed.ac.uk>
-;;
+;; Copyright (C) 2003 Peter S Galbraith <psg@debian.org>
 
 ;; This file is not part of GNU Emacs.
 
@@ -24,16 +24,14 @@
 ;;; Commentary:
 ;;
 
-;;  This package allows the user to view the Perl help for the
-;; word(s) at the point.
-;;
-;;  When this is loaded it adds a hook both `cperl-mode', and
-;; `perl-mode', allowing the perldoc help to be shown for the
-;; thing under the point, by pressing F1.
+;;  This package allows the user to view the Perl help for the word(s) at
+;;  the point.
 ;;
-;;  The code handles functions, builtins, and third party
-;; modules.
+;;  When this is loaded it adds a hook both `cperl-mode', and `perl-mode',
+;; allowing the perldoc help to be shown for the thing under the point, by
+;; pressing F1.
 ;;
+;;  The code handles functions, builtins, and third party modules.
 
 ;;; Version History
 ;;
@@ -41,256 +39,82 @@
 ;;  1.1 - Show error message when no help is found.
 ;;      - Fix name.
 ;;      - Include GPL + URL.
-;;  1.2 - Alan Shutko <ats@acm.org>
+;;  1.2 Alan Shutko <ats@acm.org>
 ;;        perldoc runs a pager, so run a benign one.  See Debian bug
 ;;        http://bugs.debian.org/144963
+;;  1.3 Peter S Galbraith <psg@debian.org>
+;;      - Checkdoc clean.
+;;      - Generate list of functions on the fly instead of using a
+;;        hardwired list.
+;;      - ToDo? Allow completion on module names, harvested from all .pod
+;;              file under directories in @INC.
 
-;;; Source
-;;
-;;  The latest version of this file should be accessable from:
-;;
-;;  http://GNUSoftware.com/Emacs/Lisp/perldoc.el
-;;
 ;;  Comments / suggests / feedback welcomed to skx@tardis.ed.ac.uk
 
+;;; Code:
 
 (require 'thingatpt)
 
 (autoload 'Man-fontify-manpage "man")
 
-(defvar perldoc-functions 
-  (list
-   "-X"
-   "abs"
-   "accept"
-   "alarm"
-   "atan2"
-   "bind"
-   "binmode"
-   "bless"
-   "caller"
-   "chdir"
-   "chmod"
-   "chomp"
-   "chop"
-   "chown"
-   "chr"
-   "chroot"
-   "close"
-   "closedir"
-   "connect"
-   "continue"
-   "cos"
-   "crypt"
-   "dbmclose"
-   "dbmopen"
-   "defined"
-   "delete"
-   "die"
-   "do"
-   "dump"
-   "each"
-   "endgrent"
-   "endhostent"
-   "endnetent"
-   "endprotoent"
-   "endpwent"
-   "endservent"
-   "eof"
-   "eval"
-   "ex"
-   "exec"
-   "exists"
-   "exit"
-   "exp"
-   "fcntl"
-   "fileno"
-   "flock"
-   "fork"
-   "format"
-   "formline"
-   "getc"
-   "getgrent"
-   "getgrgid"
-   "getgrnam"
-   "gethostbyaddr"
-   "gethostbyname"
-   "gethostent"
-   "getlogin"
-   "getnetbyaddr"
-   "getnetbyname"
-   "getnetent"
-   "getpeername"
-   "getpgrp"
-   "getppid"
-   "getpriority"
-   "getprotobyname"
-   "getprotobynumber"
-   "getprotoent"
-   "getpwent"
-   "getpwnam"
-   "getpwuid"
-   "getservbyname"
-   "getservbyport"
-   "getservent"
-   "getsockname"
-   "getsockopt"
-   "glob"
-   "gmtime"
-   "goto"
-   "grep"
-   "hex"
-   "import"
-   "index"
-   "int"
-   "ioctl"
-   "join"
-   "keys"
-   "kill"
-   "last"
-   "lc"
-   "lcfirst"
-   "length"
-   "link"
-   "listen"
-   "local"
-   "localtime"
-   "log"
-   "lstat"
-   "map"
-   "mkdir"
-   "msgctl"
-   "msgget"
-   "msgrcv"
-   "msgsnd"
-   "my"
-   "next"
-   "no"
-   "oct"
-   "open"
-   "opendir"
-   "ord"
-   "pack"
-   "package"
-   "pipe"
-   "pop"
-   "pos"
-   "print"
-   "printf"
-   "prototype"
-   "push"
-   "qr"
-   "quotemeta"
-   "qw"
-   "qx"
-   "rand"
-   "read"
-   "readdir"
-   "readline"
-   "readlink"
-   "readpipe"
-   "recv"
-   "redo"
-   "ref"
-   "rename"
-   "require"
-   "reset"
-   "return"
-   "reverse"
-   "rewinddir"
-   "rindex"
-   "rmdir"
-   "scalar"
-   "seek"
-   "seekdir"
-   "select"
-   "semctl"
-   "semget"
-   "semop"
-   "send"
-   "setgrent"
-   "sethostent"
-   "setnetent"
-   "setpgrp"
-   "setpriority"
-   "setprotoent"
-   "setpwent" 
-   "setservent" 
-   "setsockopt"
-   "shift"
-   "shmctl"
-   "shmget"
-   "shmread"
-   "shmwrite"
-   "shutdown"
-   "sin"
-   "sleep"
-   "socket"
-   "socketpair"
-   "sort"
-   "splice"
-   "split"
-   "sprintf"
-   "sqrt"
-   "srand"
-   "stat"
-   "study"
-   "sub"
-   "substr"
-   "symlink"
-   "syscall"
-   "sysopen"
-   "sysread"
-   "sysseek"
-   "system"
-   "syswrite"
-   "tell"
-   "telldir"
-   "tie"
-   "tied"
-   "time"
-   "times"
-   "times" 
-   "truncate"
-   "uc"
-   "ucfirst"
-   "umask"
-   "undef"
-   "unlink"
-   "unpack"
-   "unshift"
-   "untie"
-   "use"
-   "utime"
-   "values"
-   "vec"
-   "wait"
-   "waitpid"
-   "wantarray"
-   "warn"
-   "write"
-   )
-  "Perl function names."
-  )
+(defgroup perldoc nil
+  "Show help for Perl functions, builtins, and modules."
+  :group  'help)
 
+(defcustom perldoc-define-F1 nil
+  "If non-nil, bind [F1] to `perl-doc-at-point' in perl modes.
+It installs `perldoc-perl-hook' in Perl mode hooks."
+  :type 'boolean
+  :group 'perldoc
+  :require 'perldoc
+  :set (lambda (symbol value)
+         (set-default symbol value)
+         (cond
+          (value
+           (add-hook 'cperl-mode-hook 'perldoc-perl-hook)
+           (add-hook 'perl-mode-hook 'perldoc-perl-hook))
+          (t
+           (remove-hook 'cperl-mode-hook 'perldoc-perl-hook)
+           (remove-hook 'perl-mode-hook 'perldoc-perl-hook)))))
 
-(defun perldoc ( string )
-  "Run perldoc on the given string.
-If the string is a recognised function then we cann call `perldoc-function',
-otherwise we call `perldoc-module'."
-  (interactive "s:Perl function / module: " )
-  (let ((functions perldoc-functions)
-	(found nil ))
-    (while (and (car functions) (not found))
-      (if (equal string (car functions))
-	  (progn
-	    (perldoc-function string)
-	    (setq found t)))
-      (setq functions (cdr functions)))
-    (if (not found)
-	(perldoc-module string)))
-)
+(defvar perldoc-functions-alist nil
+  "Alist holding the list of perl functions.")
+
+(defun perldoc-functions-alist ()
+  "Return the alist of perl functions constructed from perlfunc.pod."
+  (if perldoc-functions-alist
+      perldoc-functions-alist
+    (setq perldoc-functions-alist nil)
+    (let ((tmp-buffer (get-buffer-create " *perldoc*"))
+          (case-fold-search nil))
+      (set-buffer tmp-buffer)
+      (erase-buffer)
+      (shell-command "perldoc -u perlfunc" t t)
+      (goto-char (point-min))
+      (search-forward "Alphabetical Listing of Perl Functions" nil t)
+      (while (re-search-forward
+              "^=item \\(\\([a-z][^ //\n]*\\)\\|\\(I<\\(.*\\)> \\)\\)" nil t)
+        (let ((entry (list (or (match-string 2)(match-string 4)))))
+          (when (not (member entry perldoc-functions-alist))
+            (push entry perldoc-functions-alist)))))
+    perldoc-functions-alist))
 
+;;;###autoload
+(defun perldoc (string)
+  "Run perldoc on the given STRING.
+If the string is a recognised function then we can call `perldoc-function',
+otherwise we call `perldoc-module'."
+  (interactive (list (completing-read "Perl function or module: "
+                                      (perldoc-functions-alist) nil nil)))
+  (perldoc-functions-alist)
+  (cond
+   ((assoc string perldoc-functions-alist)
+    (perldoc-function string))
+   ((stringp string)
+    (perldoc-module string))
+   (t
+    (message "Nothing to find."))))
+    
 (defun perldoc-start-process (&rest args)
   "Call perldoc with ARGS.
 Sets up process sentinals and needed environment to call perldoc."
@@ -298,10 +122,10 @@
 		    "type"
 		  "cat"))
 	 (perldoc-process)
-	 (process-environment 
+	 (process-environment
 	  (cons (concat "PERLDOC_PAGER=" pager)
 	  process-environment)))
-    ;; Can't convince perldoc not to run a pager, so we run a 
+    ;; Can't convince perldoc not to run a pager, so we run a
     ;; benign one
     (set-buffer (get-buffer-create "*Perldoc*"))
     (kill-all-local-variables)
@@ -314,56 +138,50 @@
     (process-kill-without-query perldoc-process)))
     
 
-(defun perldoc-function( function )
- "Show the help text for the given Perl function / builtin."
- (interactive "sPerl function / builtin / module : ")
-   (perldoc-start-process "perldol" nil "perldoc" "-f" function))
+(defun perldoc-function (function)
+ "Show the help text for the given Perl FUNCTION / builtin."
+ (interactive (list (completing-read "Perl function: "
+                                     (perldoc-functions-alist) nil t)))
+ (perldoc-start-process "perldol" nil "perldoc" "-f" function))
 
-(defun perldoc-module( module )
- "Show the help text for the given Perl module."
+(defun perldoc-module (module)
+ "Show the help text for the given Perl MODULE."
  (interactive "sPerl module : ")
    (perldoc-start-process "perldol" nil "perldoc" module))
 
-
 (defun perldoc-process-filter (proc string)
-  "Process the results from the catdoc process."
+  "Process the results from the catdoc process PROC, inserting STRING."
   (set-buffer (get-buffer-create "*Perldoc*"))
   (insert string))
 
 (defun perldoc-sentinel (proc msg)
-  "When the catdoc process has finished, switch to its output buffer,
- and rename it appropriately."
+  "Perldoc sentinel for process PROC and MSG describing the change.
+When the catdoc process has finished, switch to its output buffer."
   (cond ((eq (process-status proc) 'exit)
 	 (set-buffer "*Perldoc*")
-	 (if (< (count-lines (point-min) (point-max)) 2)
-	     (progn
-	       (message "No perldoc help found.")
-	       (kill-buffer (get-buffer "*Perldoc*")))
+         (goto-char (point-min))
+         (cond
+          ((and (< (count-lines (point-min) (point-max)) 2)
+                (re-search-forward "No documentation found for .*" nil t))
+           (message (match-string 0))
+           (kill-buffer (get-buffer "*Perldoc*")))
+          (t
 	   (pop-to-buffer "*Perldoc*")
 	   (goto-char (point-min))
 	   (let ((Man-args "perldoc"))
-	     (Man-fontify-manpage))))))
-
+	     (Man-fontify-manpage)))))))
 
-(defun perldoc-cperl-hook ()
-  "A hook which binds F1 to `perldoc'."
-  (local-set-key [f1] '(lambda ()
-			   (interactive)
-			   (perldoc (thing-at-point 'filename)))
-		 )
-)
+;;;###autoload
+(defun perldoc-at-point ()
+  "Call `perldoc' for string at point."
+  (interactive)
+  (perldoc (or (thing-at-point 'word)
+               (thing-at-point 'filename))))
 
+;;;###autoload
 (defun perldoc-perl-hook ()
-  "A hook which binds F1 to `perldoc'."
-  (local-set-key [f1] '(lambda ()
-			   (interactive)
-			   (perldoc (thing-at-point 'filename)))
-		 )
-)
-
-(add-hook 'cperl-mode-hook 'perldoc-cperl-hook)
-(add-hook 'perl-mode-hook 'perldoc-perl-hook)
+  "A hook which binds F1 to `perldoc-at-point'."
+  (local-set-key [f1] 'perldoc-at-point))
 
 (provide 'perldoc)
-
 ;;; perldoc.el ends here
