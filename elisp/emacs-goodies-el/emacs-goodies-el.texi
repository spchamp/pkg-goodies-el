@c -*- mode: texinfo -*-
\input texinfo

@c $Id: emacs-goodies-el.texi,v 1.36 2003/10/08 01:37:28 psg Exp $
@c %**start of header
@setfilename info/emacs-goodies-el
@settitle Emacs-Goodies-el
@c %**end of header

@dircategory Emacs
@direntry
* Emacs-Goodies-el: (emacs-goodies-el). Miscellaneous add-ons for Emacs
@end direntry

@c Version variables.
@set EDITION 1.0
@set UPDATED 8 May 2003

@ifinfo
This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{Emacs-Goodies-el}.
@end ifinfo

@titlepage
@title Emacs-Goodies-el: Miscellaneous add-ons for Emacs
@subtitle A manual for what's in this package.
@author Peter S. Galbraith
@end titlepage

@node Top, align-string, (dir), (dir)
@top The Emacs-Goodies-el Package Setup

This manual describes the Emacs-Goodies-el package and its setup.  A
quick descriptions of elisp files contained in this package can be found
in the file @file{/usr/share/doc/emacs-goodies-el/README.Debian.gz}.

All packaged files are installed, setup and ready to use if they don't
override standard Emacs commands, modes, or settings.

Some extra package installation and setup is done if you customize the
variable @code{emacs-goodies-el-defaults} to t (its aggressive state).
These will override standard Emacs defaults, but in a good
(uncontroversial) way.  The affected packages are currently only:
@ref{ff-paths}, @ref{home-end} and @ref{ibuffer}.  Packages which
require activation in order to function also include:
@ref{bar-cursor}, @ref{diminish}, @ref{df} and @ref{filladapt}.

To customize setup of all customizable packages on a finer-grain
basis, do:
@example
@kbd{M-x} customize-group @key{RET} emacs-goodies-el @key{RET}
@end example

In the following document, when we speak of customizing a variable, we
mean to use the Emacs custom interface, such as in:
@example
@kbd{M-x} customize-variable @key{RET} some-variable @key{RET}
@end example
When we speak of customizing a group, it's as the example above for the
group @code{emacs-goodies-el}.

The following files are documented so far.  Eventually, all files will
be documented.

@menu
* align-string::                Align string components over several lines
* all::                         Edit all lines matching a given regexp
* auto-fill-mode-inhibit::      auto-fill-mode (de)activation
* bar-cursor::                  Switch block cursor to a bar
* boxquote::                    Quote text with a semi-box
* browse-kill-ring::            Interactively insert items from kill-ring
* coffee::                      Submit BREW request to RFC2324-compliant device
* clipper::                     Save strings of data for further use
* cyclebuffer::                 Select buffer by cycling through
* df::                          Display space left on partitions in mode-line
* dict::                        Emacs interface to dict client
* diminish::                    Diminish minor-mode's display
* dirvars::                     Local variables that apply to entire directory
* ff-paths::                    Searches certain paths to find files
* filladapt::                   Adaptively set fill-prefix
* floatbg::                     Slowly modify background color
* framepop::                    Display temporary buffers in a dedicated frame
* highlight-beyond-fill-column::  Fontify beyond the fill-column
* highlight-completion::        Completion with highlighted provisional text
* highlight-current-line::      highlight line where the cursor is
* home-end::                    Alternative Home and End key commands
* htmlize::                     HTML-ize font-lock buffers
* ibuffer::                     Operate on buffers like dired
* keydef::                      A simpler way to define keys, with kbd syntax
* keywiz::                      Emacs key sequence quiz
* map-lines::                   Map a command over many lines
* mutt-alias::                  Lookup/insert mutt mail aliases.
* muttrc-mode::                 Major mode to edit muttrc under Emacs
* newsticker::                  A Newsticker for Emacs
* nuke-trailing-whitespace::    Strip trailing whitespace from buffers
* obfusurl::                    Obfuscate URLs so they aren't spoilers
* perldoc::                     Show help for Perl functions and modules.
* protbuf::                     Protect buffers from accidental killing
* session::                     Session Management for Emacs
@end menu

This work compiles GPL'ed documentation from the various elisp files
in /usr/share/emacs/site-lisp/emacs-goodies-el/.  As a derived work
from GPL'ed works, this text is also licensed under the GPL V2 (See
/usr/share/common-licenses/GPL-2) and is edited by Peter S. Galbraith
@email{psg@@debian.org}.

Files not yet documented here:

@table @samp
@item /usr/share/emacs/site-lisp/emacs-goodies-el/initsplit.el
code to split customizations into different files
@item /usr/share/emacs/site-lisp/emacs-goodies-el/projects.el
Project-based buffer name management
@item /usr/share/emacs/site-lisp/emacs-goodies-el/protocols.el
Protocol database access functions.
@item /usr/share/emacs/site-lisp/emacs-goodies-el/services.el
Services database access functions.
@item /usr/share/emacs/site-lisp/emacs-goodies-el/setnu.el
vi-style line number mode for Emacs
@item /usr/share/emacs/site-lisp/emacs-goodies-el/silly-mail.el
generate bozotic mail headers
@item /usr/share/emacs/site-lisp/emacs-goodies-el/sys-apropos.el
Interface for the *nix apropos command.
@item /usr/share/emacs/site-lisp/emacs-goodies-el/table.el
create and edit WYSIWYG text based embedded tables
@item /usr/share/emacs/site-lisp/emacs-goodies-el/tail.el
Tail files within Emacs
@item /usr/share/emacs/site-lisp/emacs-goodies-el/tc.el
cite text with proper filling
@item /usr/share/emacs/site-lisp/emacs-goodies-el/thinks.el
Insert text in a think bubble.
@item /usr/share/emacs/site-lisp/emacs-goodies-el/tld.el
TLD lookup tool.
@item /usr/share/emacs/site-lisp/emacs-goodies-el/todoo.el
Major mode for editing TODO files
@item /usr/share/emacs/site-lisp/emacs-goodies-el/toggle-buffer.el
flips back and forth between two buffers
@item /usr/share/emacs/site-lisp/emacs-goodies-el/toggle-case.el
toggles case at point
@item /usr/share/emacs/site-lisp/emacs-goodies-el/toggle-option.el
easily toggle frequently toggled options
@item /usr/share/emacs/site-lisp/emacs-goodies-el/twiddle.el
mode-line display hack
@item /usr/share/emacs/site-lisp/emacs-goodies-el/under.el
Underline a region
@item /usr/share/emacs/site-lisp/emacs-goodies-el/wdired.el
Rename files editing their names in dired buffers
@item /usr/share/emacs/site-lisp/emacs-goodies-el/xrdb-mode.el
mode for editing X resource database files
@end table

@node align-string, all, Top, Top
@chapter align-string - align string components over several lines.

This elisp file is not documented.  The commands are:

@itemize @bullet
@item align-string

  Align first occurrence of REGEXP in each line of region.  If given a
prefix argument, align occurrence number COUNT on each line.

@item align-all-strings

  Align all occurrences of REGEXP in each line of region.  That is to
say, align the first occurrence of each line with each other, align
the second occurence of each line with each other, and so on.
@end itemize


@node all, auto-fill-mode-inhibit, align-string, Top
@chapter all - Edit all lines matching a given regexp.

This is an implementation of the xedit @code{all} command for GNU Emacs.

It works mostly like @code{occur} except that changes to the
@code{*All*} buffer are propagated back to the original buffer.

Type @kbd{M-x all} to try it out.

@node auto-fill-mode-inhibit, bar-cursor, all, Top
@chapter auto-fill-mode-inhibit - auto-fill-mode (de)activation

The purpose of this library is to allow the use of @command{auto-fill-mode}
using, e.g.

@example
 (add-hook 'text-mode-hook 'turn-on-auto-fill)
@end example
or, using by customizing the variable @code{text-mode-hook},
selecting @command{turn-on-auto-fill} and then save the setting.

You may disable @command{auto-fill-mode} on buffers with names that
match one of a list of regular expressions by customizing the variable
@code{auto-fill-inhibit-list}.

@node bar-cursor, boxquote, auto-fill-mode-inhibit, Top
@chapter bar-cursor - switch block cursor to a bar

A simple package to convert the block cursor into a bar cursor.  In
overwrite mode, the bar cursor changes back into a block cursor.
This is a quasi-minor mode, meaning that it can be turned on & off
easily though only globally (hence the quasi-).

To enable it, customize the variable @code{bar-cursor-mode}.

It is also listed when you customize the group @code{emacs-goodies-el}.

@node boxquote, browse-kill-ring, bar-cursor, Top
@chapter boxquote - Quote text with a semi-box.

boxquote provides a set of functions for using a text quoting style that
partially boxes in the left hand side of an area of text, such a marking
style might be used to show externally included text or example code.

@example
,----
| The default style looks like this.
`----
@end example

A number of functions are provided for quoting a region, a buffer, a
paragraph and a defun. There are also functions for quoting text while
pulling it in, either by inserting the contents of another file or by
yanking text into the current buffer.

Look for the @command{@kbd{M-x} boxquote-*} commands.

@node browse-kill-ring, coffee, boxquote, Top
@chapter browse-kill-ring.el -  interactively insert items from kill-ring.

Ever feel that @kbd{C-y M-y M-y M-y ...} is not a great way of trying
to find that piece of text you know you killed a while back?  Then
browse-kill-ring.el is for you.

To use, type @command{@kbd{M-x} browse-kill-ring}.  You can bind
@command{browse-kill-ring} to a key, like:

@example
(global-set-key (kbd "C-c k") 'browse-kill-ring)
@end example

Even better than doing that, though, is to set up @kbd{M-y} such that
it invokes @command{browse-kill-ring} if the last command wasn't a
yank.  This great idea is from Michael Slass @email{mikesl@@wrq.com}.
Here is code (from him) to do this:

@example
(defadvice yank-pop (around kill-ring-browse-maybe (arg))
  "If last action was not a yank, run `browse-kill-ring' instead."
  (if (not (eq last-command 'yank))
      (browse-kill-ring)
    ad-do-it))

(ad-activate 'yank-pop)
@end example

(The emacs-goodies-el package could add a customizable variable to
set this up.  Ask if this would be useful. - @email{psg@@debian.org})

Note that the command keeps track of the last window displayed to
handle insertion of chosen text; this might have unexpected
consequences if you do @command{@kbd{M-x} browse-kill-ring}, then
switch your window configuration, and try to use the same @code{*Kill
Ring*} buffer again.

@node coffee, clipper, browse-kill-ring, Top
@chapter coffee.el - Submit BREW request to an RFC2324-compliant coffee device

This module provides an Emacs interface to RFC2324-compliant coffee
devices (Hyper Text Coffee Pot Control Protocol, or HTCPCP). It
prompts the user for the different additives, then issues a BREW
request to the coffee device.

coffee.el requires a special BREW-capable version of Emacs/W3 to be
installed.

Reference: <URL:ftp://ftp.isi.edu/in-notes/rfc2324.txt>

@quotation
You can probably guess how coffee.el came about ...yadda yadda
everything but make coffee ...yadda yadda ...
@end quotation

@node clipper, cyclebuffer, coffee, Top
@chapter clipper.el - Save strings of data for further use.

Clipper is a way to handle 'clips' of text with some persistance via handles.
A good example is something like the GNU Public License.  If you do a lot of
Free Software work and need to have a copy of the GPL for insertion in your
source files, you can save this text as a 'GPL' clip.  When you call
clipper-insert you will be prompted for a name and when you enter GPL this
will be inserted.

Clipper can also perform search and replacement on token names.  For example
if want the current buffer filename you can use the token
@code{CLIPPER_FILE_NAME_NONDIRECTORY}.

@noindent Available tokens are:

@code{CLIPPER_FILE_NAME_NONDIRECTORY}: The current filename
without its directory.  If this buffer isn't saved to disk then the
buffer name is used.

@code{CLIPPER_FILE_NAME_NONDIRECTORY_SANS_EXTENSION}: The current
filename without its directory and without an extension.

@noindent The following functions allow you to manipulate clipper:

@command{clipper-create} creates a new clip.

@command{clipper-delete} deletes an existing clip.

@command{clipper-insert} inserts a clip into the current buffer.

@command{clipper-edit-clip} edits an existing clip.

@noindent You might also want to setup personal key bindings:

@example
(global-set-key "\C-cci" 'clipper-insert)
(global-set-key "\C-ccc" 'clipper-create)
@end example

@node cyclebuffer, df, clipper, Top
@chapter cyclebuffer - Select buffer by cycling through.

Cyclebuffer is yet another way of selecting buffers.  Instead of
prompting you for a buffer name, cyclebuffer-forward switches to the
most recently used buffer, and repeated invocations of
cyclebuffer-forward switch to less recently visited buffers.  If you
accidentally overshoot, calling cyclebuffer-backward goes back.

I find this to be the fastest buffer-switching mechanism; it's like
@kbd{C-x b <RET>} without the @key{RET}, but it's not limited to the
most recently accessed buffer.  Plus you never have to remember buffer
names; you just keep cycling until you recognize the buffer you're
searching for.

@noindent Suggested keybings:
@example
(global-set-key "M-N" 'cyclebuffer-forward)
(global-set-key "M-P" 'cyclebuffer-backward)
@end example

@node df, dict, cyclebuffer, Top
@chapter df - display space left on partitions in the mode-line.

This is a quick hack to display disk usage in the mode-line.

If you work with a lot of users sharing the same partition, it
sometimes happens that there is no space left to save your work, which
may drive you to serious brain damage when you lose important work.
This package allows you to have the available disk space and the buffer
size displayed in the mode-line, so you know when you can save your
file or when it's time to do some cleanup.

df is simple to use. Add something like
@example
(df "/home")
@end example
in your .emacs if you want to scan @file{/home}.  Even simpler, enable
it by customizing the group @code{df} where you can toggle on the
variable @code{df-run-on-startup}.

@node dict, diminish, df, Top
@chapter dict - Emacs interface to dict client

This package is an Emacs wrapper around the shell @file{dict} command
and provides an easy and comfortable (from my point of view) access to
the dictd server from Emacs.

The package provides several key bindings, which are customisation variables,
so you can change them easily:

@itemize @bullet
@item
@key{C-c d d} for running dict with options defined by
customisation variables described below.

@item
@key{C-c d r} for running dict on region as a single word.

@item
@key{C-c d m} for running dict on every word in the region.

@item
@key{C-c d s} for running dict to perform search on the given server.

@item
@key{C-c d w} for running wordinspect GUI dict client.
@end itemize

The Debian emacs-goodies-el package doesn't setup these keys by
default.  The first time you use @code{dict} in a session you must do
so manually with @code{M-x dict}.  Thereafter the keybindings will
work.  If someone requests it, a customization variable could be added
to enable them automatically.

Descriptions of all customisation variables are given below in their
definitions, and of cause you can find them in the customization of
the grou @code{Dict}.

The author hopes you find the program useful and would like to know
your opinion about the program, improvement suggestions and of course
bug reports.  Mail them to max-appolo@@mail.ru

@node diminish, dirvars, dict, Top
@chapter diminish - Diminish minor-mode's display

Minor modes each put a word on the mode line to signify that they're
active.  This can cause other displays, such as % of file that point is
at, to run off the right side of the screen.  For some minor modes, such
as mouse-avoidance-mode, the display is a waste of space, since users
typically set the mode in their .emacs & never change it.  For other
modes, such as my jiggle-mode, it's a waste because there's already a
visual indication of whether the mode is in effect.

A diminished mode is a minor mode that has had its mode line
display diminished, usually to nothing, although diminishing to a
shorter word or a single letter is also supported.  This package
implements diminished modes.

@noindent To create diminished modes interactively, type
@example
@kbd{M-x} diminish
@end example
@noindent to get a prompt like
@example
  Diminish what minor mode:
@end example
@noindent and respond with the name of some minor mode, like
@code{mouse-avoidance-mode}. You'll then get this prompt:
@example
  To what mode-line display:
@end example
Respond by just hitting @key{<Enter>} if you want the name of the mode
completely removed from the mode line.  If you prefer, you can abbreviate
the name.  If your abbreviation is 2 characters or more, such as "Av",
it'll be displayed as a separate word on the mode line, just like minor
modes' names.  If it's a single character, such as "V", it'll be scrunched
up against the previous word, so for example if the undiminished mode line
display had been "Abbrev Fill Avoid", it would become "Abbrev FillV".
Multiple single-letter diminished modes will all be scrunched together.
The display of undiminished modes will not be affected.

To find out what the mode line would look like if all diminished modes
were still minor, type @command{@key{M-x} diminished-modes}.  This
displays in the echo area the complete list of minor or diminished
modes now active, but displays them all as minor.  They remain
diminished on the mode line.

To convert a diminished mode back to a minor mode, type
@command{@key{M-x} diminish-undo} to get a prompt like
@example
  Restore what diminished mode:
@end example
Respond with the name of some diminished mode.  To convert all
diminished modes back to minor modes, respond to that prompt
with @code{diminished-modes} (unquoted, & note the hyphen).

When you're responding to the prompts for mode names, you can use
completion to avoid extra typing; for example, m o u SPC SPC SPC
is usually enough to specify mouse-avoidance-mode.  Mode names
typically end in "-mode", but for historical reasons
auto-fill-mode is named by "auto-fill-function".

To create diminished modes noninteractively in your .emacs file, put
code like
@example
  (require 'diminish)
  (diminish 'abbrev-mode "Abv")
  (diminish 'jiggle-mode)
  (diminish 'mouse-avoidance-mode "M")
@end example
near the end of your .emacs file.  It should be near the end so that any
minor modes your .emacs loads will already have been loaded by the time
they're to be converted to diminished modes.

Alternatively, you can setup dimished modes using the customize
interface by customizing the variable @code{diminished-minor-modes}.
The same caveat as above applies and the minor mode libraries should
be loaded in ~/.emacs before the @code{(custom-set-variables} line.

@node dirvars, ff-paths, diminish, Top
@chapter dirvars - local variables that apply to an entire directory.

Emacs allows you to specify local variable values for use when
editing a file either in the first line or in a local variables
list.

This file provides similar functionality, but for an entire
directory tree.

You simply place an .emacs-dirvars file in the root of your
project's tree, and you can then set emacs variables like you would
in a Local Variables: section at the end of a file.  E.g. the
contents of a typical dirvars file might look like this:

@example
   ;; -*- emacs-lisp -*-
   ;;
   ;; This file is processed by the dirvars emacs package.  Each variable
   ;; setting below is performed when this dirvars file is loaded.
   ;;
   indent-tabs-mode: nil
   tab-width: 8
   show-trailing-whitespace: t
   indicate-empty-lines: t
@end example

Much of this code is stolen and modified from the standard Emacs
files.el

This code refuses to set any symbol that meets any of these
criteria (this criteria is stolen from files.el):

@itemize @bullet
@item
the symbol is in the ignored-local-variables list

@item
the symbol has the risky-local-variable property.

@item
the symbol name ends in -hook(s), -function(s), -form(s),
    -program, -command, or -predicate.
@end itemize

To use this package, it must be loaded.  You can do this by adding a require
statement to your @file{~/.emacs} file:

@example
  (require 'dirvars)
@end example

@node ff-paths, filladapt, dirvars, Top
@chapter ff-paths - searches certain paths to find files.

This code allows you to use C-x C-f normally most of the time, except that
if the requested file doesn't exist, it is checked against a list of
patterns for special paths to search for a file of the same name.

@noindent Examples:
@itemize @bullet
 @item a file extension of @file{.bib} will cause to search the path
defined in $BSTINPUTS or $BIBINPUTS for the file you requested.
 @item a file extension of @file{.h} will cause the @file{/usr/include/}
and @file{/usr/local/include/} directory trees to be searched.
 @item a file extension of @file{.sty} causes a search of TEXINPUTS and
of all directories below @file{"/usr/share/texmf/tex/}
 @item a file extension of @file{.el} causes a search of the path set in
the emacs variable @code{load-path}.
 @item If the aboves searches don't return a match, the filename is
searched for using the @file{locate} command (if available on your
system).
 @item gzip-compressed files (@file{.gz}) will also be found by ff-paths
if the package jka-compr is present.  If you use some other package,
simply set the @code{ff-paths-gzipped} variable to t:
@end itemize

If one file is found, or many files of the same name are found, then the
*completions* buffer is displayed with all possibilities, including the
non-existing path you first provided.  Selecting it creates the new
file.

This package runs as a find-file-not-found-hooks hook, and so will
happily live alongside other such file-finding mechanisms (e.g.
PC-look-for-include-file PC-try-load-many-files vc-file-not-found-hook)

The patterns to test against filenames and the associated paths to search
for these files can be modified by the user by editing the variable
@code{ff-paths-list}

I suggest that you use ffap.el by Michelangelo Grigni <mic@@cs.ucsd.edu>,
now part of GNU Emacs.  His package will guess the filename from the
text under the editing point.  It will search for an existing file in
various places before you even get the "File: " prompt.  ff-paths will
provide itself to ffap as an additional tool to locate the file before
you ever see a prompt.  ff-paths behaves slightly differently with ffap
than it does with find-file: if the file path selected under point by
ffap does not exist, it is not shown in the completions buffer along
with existing paths.  If only one existing path is found for said file,
it is placed in the minibuffer at the ffap prompt.  Also, since using
the `locate' command is fairly aggressive, it is not used in the ffap
toolkit.

@noindent Installation:

ff-paths installs itself as a hook in find-file-not-found-hooks for
find-file.  If ffap is installed, ff-paths installs itself as a
toolbox hook in ffap-alist.

To use it, customize the variable @code{ff-paths-install}.

To also enable ffap, customize the variable @code{ff-paths-use-ffap}.

Both of the above are enabled if you customize the variable
@code{emacs-goodies-el-defaults} to t (its aggressive state).

You may alter various settings of @code{ff-paths} using the
customization group @code{ff-paths}.

@node filladapt, floatbg, ff-paths, Top
@chapter filladapt - adaptively set fill-prefix and overload filling functions

These functions enhance the default behavior of Emacs' Auto Fill
mode and the commands @code{fill-paragraph}, @code{lisp-fill-paragraph},
@code{fill-region-as-paragraph} and @code{fill-region}.

The chief improvement is that the beginning of a line to be
filled is examined and, based on information gathered, an
appropriate value for fill-prefix is constructed.  Also the
boundaries of the current paragraph are located.  This occurs
only if the fill prefix is not already non-nil.

The net result of this is that blurbs of text that are offset
from left margin by asterisks, dashes, and/or spaces, numbered
examples, included text from USENET news articles, etc. are
generally filled correctly with no fuss.

Note that in this release Filladapt mode is a minor mode and it is
_off_ by default.  If you want it to be on by default, use
@example
  (setq-default filladapt-mode t)
@end example

@code{M-x filladapt-mode} toggles Filladapt mode on/off in the current
buffer.

Filladapt works well with any language that uses comments that
start with some character sequence and terminate at end of line.
So it is good for Postscript, Lisp, Perl, C++ and shell modes.
It's not good for C mode because C's comments are multiline.

Use
@example
    (add-hook 'text-mode-hook 'turn-on-filladapt-mode)
@end example
to have Filladapt always enabled in Text mode, or customize the
variable @code{filladapt-turn-on-mode-hooks}.

Use
@example
    (add-hook 'c-mode-hook 'turn-off-filladapt-mode)
@end example
to have Filladapt always disabled in C mode.

In many cases, you can extend Filladapt by adding appropriate entries
to the following three custiomizable variables.  See
@code{postscript-comment} or @code{texinfo-comment} as a sample of
what needs to be done.

@example
    filladapt-token-table
    filladapt-token-match-table
    filladapt-token-conversion-table
@end example

@node floatbg, framepop, filladapt, Top
@chapter floatbg - slowly modify background color

Floatbg slowly modifies the backgound color through an hsv color
model, like floatbg for X-Windows by Jan Rekers.

To enable it, customize the variable @code{floatbg-mode}.
There are other tweaks to set in the customization group
@code{floatbg}.

@node framepop, highlight-beyond-fill-column, floatbg, Top
@chapter framepop - display temporary buffers in a dedicated frame

Framepop makes temporary buffers such as *Help* or *Completions*
appear in a separate frame which is easily dismissed when no longer
needed.

@menu
* announcement::                Announcement on gnu-emacs-sources
* Purpose::                     What's it's for
* Quick Setup::                 Get going within a minute
* Customization::               Extra settings
* For elisp hackers::           More extra seetings for teh adventurous
* Bugs::                        Or limitations
@end menu

@node announcement, Purpose, framepop, framepop
@section announcement on gnu-emacs-sources

@noindent FROM: David M Smith
@noindent DATE: 08/14/1996 10:01:29
@noindent SUBJECT:  Framepop 2.19

@noindent Get that *Completions* buffer outta my face!!!"

Are you tired of hearing this plaintive cry echoing around your
office? Are you sick of having two-line *Help* messages taking up half
of your Emacs frame? Are you endlessly frustrated by having that
useful mode description in *Help* being overwritten by some useless
output from @key{C-h k}? Well, have WE got the package for YOU!

Yes, it`s FramePop -- the NEW and IMPROVED successor to that old Emacs
18 favourite, popper.el. As if by MAGIC, the ``progeny of popper``
takes care of temporary buffers like *Help* and *Completions* by
making them appear in their own, separate shrink-wrapped FramePop
frame, to be read at your leisure without destroying your
painstakingly created window configuration. The framepop frame is
automatically sized to your taste, taking up as little of your
precious VDU screen real estate as possible. And, what`s more, it
comes in *your choice* of colours and font. How much would you expect
to pay for this INCREDIBLY USEFUL feature? Well, DON`T ANSWER! Because
you also get the amazing FramePop Frame ToolKit KeyMap, providing
every command you would ever need to manipulate the amazing FramePop
Frame. You can scroll it, you can resize it, you can even iconify it
completely. A complete suite of manipulation commands, yours as our
gift even if you decide to return the FramePop package.

A package like this could cost hundreds of pesetas in the stores, but
how much would @strong{you} expect to pay? Well, DON`T ANSWER! Because you
also get the incredible FramePop Frame Duplicator! Got a temporary
frame you want to keep around as a reference? Just hit those keys, and
in just microseconds you can have a copy of your own -- in yet another
shrink-wrapped Emacs frame -- to keep as your own for as long as you
wish. But what if it`s a *Help* buffer, I hear you ask? Won`t it be
overwritten next time a *Help* buffer is created? That`s no problem
for the FramePop Frame Duplicator! Just give it a prefix argument, and
it not only copies the frame but it copies the buffer AS WELL! It even
gives it a stylishly chosen NEW NAME!

That`s right, you get the FramePop frame in your choice of colours and
font, the FramePop Frame ToolKit KeyMap and the amazing FramePop Frame
Duplicator, @strong{plus} the no-money-back GPL "NO WARRANTY" guarantee, for
the incredible, never-to-be-repeated price of ABSOLUTELY NOTHING!
Remember, FramePop is not available in stores.  Eval now! Send no
money -- we won`t bill you. Eval now!

SPECIAL OFFER: If you install FramePop in the next 48 hours you`ll
receive FramePop: the Deluxe Limited Edition 2.19! All the features of
the original FramePop 2.17 plus extra bugfixes, leaner code (which
doesn`t require advice) and better interaction with completion and the
minibuffer. Extra value at no extra cost if you act now!

@node Purpose, Quick Setup, announcement, framepop
@section Purpose

Defines temp-buffer-show-function to display buffers in a dedicated
temporary frame (and so requires a display which can accomodate
separate frames). The frame is automatically shrink-wrapped to just
contain the buffer (restricted to a maximum and minimum
size). Buffers thus affected include *Help*, completion buffers and
buffer listings.

Commands are provided for manipulating the FramePop frame:
scrolling, resizing, window manager functions, and also a facility
for copying the displayed buffer. You need never lose that handy
*Help* buffer again!

Framepop is orthogonal to the Emacs' special-display-buffers feature;
you can use both at the same time if you so desire.  You can make
special-display buffers appear in the FramePop frame as well, if you
wish; see below.

@node Quick Setup, Customization, Purpose, framepop
@section Quick Setup

Since framepop is already installed and byte-compiled in this packaged
form, this setup can all be done using the custom interface with
@command{M-x customize-group framepop}.

To use framepop, you must first enable it.  Customize the variable
@code{framepop-enable} to @code{on}.

Then you'll need to enable a keybing to the @code{framepop-map}
keymap.  We suggest using @key{F2}.  Customize the variable
@code{framepop-enable-keybinding} and select @key{F2} or some other
string that represents a key you'd prefer.

You may then optionally extend Framepop's functionality by allowing it
to use the @code{advice} library to advise other functions.  Select
this option by customizing the variable @code{framepop-use-advice} to
@code{on}.

Save all these settings and you are ready to go.

Type @command{M-x framepop-display-help} (bound to @key{?} in
framepop-map) for more information about the available commands
to control the new frame.  For example, @key{F2} iconizes the Framepop
frame, so if you used the suggested binding of @key{F2} above for the
Framepop keymap pressing @key{F2} twice will dismiss the frame.

@node Customization, For elisp hackers, Quick Setup, framepop
@section Customization

More detailed customization is available via @code{M-x customize-group
RET framepop'}.  This sections discusses some of them.

The maximum and minimum height of the framepop buffer are
determined by the user options @code{framepop-max-frame-size} and
@code{framepop-min-frame-size}.

The variable @code{framepop-frame-parameters} holds the Framepop frame
parameters. You can define colours, fonts and positions for the
Framepop frame here. For example:

@verbatim
  (setq framepop-frame-parameters
     '((name . nil)                     ; use buffer name
       (unsplittable . t)               ; always include this
       (menu-bar-lines . 0)             ; no menu bar
       (minibuffer . nil)               ;    or minubuffer
       (left . -1)                      ; top left corner of screen,
       (top . 30)                       ;    away from my main frame
       (width . 71)                     ; narrower, so it fits nicely
       (background-color . "orchid4")   ; I like purple. So sue me.
       (foreground-color . "cornsilk")
       (font . "-*-courier-bold-o-*-*-12-*-*-*-m-*-*-*")))
@end verbatim

But you may use the customize interface to edit
@code{framepop-frame-parameters}.

By default, only temporary buffers (which call
@code{temp-buffer-show-function}) are displayed in the FramePop frame.
To make other buffers also appear in the selected frame, the easiest
thing to do is make buffers listed in special-display-buffer-names or
special-display-regexps appear in the framepop frame by adding the
following to your @file{~/.emacs} file:

@example
(setq special-display-function 'framepop-special-display)
@end example

@noindent Here's a suggestion for some buffers to use this feature on:

@example
(setq special-display-buffer-names
 '("*Shell Command Output*"  "*grep*" "*compilation*"))
@end example

Alternatively (if you want to keep the special-display feature
separate from framepop) you can use the function @code{framepop-wrap}.

There are lots of nifty things that can be done with the advice
package to make FramePop work that much better. Many such things
will be done for you automatically if you

@example
  (require 'advice)
@end example

before loading the framepop package (or customize the variable
@code{framepop-use-advice}.

Buffer names listed in the variable @code{framepop-do-not-display-list}
will not be displayed in the framepop-frame by default.

You may set the variable @code{framepop-auto-resize} to @code{on} to
have the FramePop frame automatically resize to accomodate buffers
which change size. If you do not, initially empty buffers (which are
likely to grow) get a FramePop frame of full size.

@node For elisp hackers, Bugs, Customization, framepop
@section For elisp hackers

Alternatively, for greater control over the behaviour of the
framepop frame, you can redefine the variable `framepop-lines' to a
lambda expression which will return the desired height of a buffer
to be displayed in the framepop frame. It may also return nil,
meaning that the buffer should not be displayed in the FramePop
frame, but in an ordinary window instead. The default value of this
lambda expression is the number of lines in the buffer, except that
empty buffers and compilation buffers (both of which are likely to
grow) get full size. You may wish to disable this feature, or
perhaps make other constraints based on buffer mode, etc. For
example, placing the following in your .emacs will force the
framepop frame to have as many lines as the buffer being displayed
provided it is not the *Completions* buffer (which will not be
displayed in the FramePop frame at all):

@verbatim
  (setq framepop-lines
    '(lambda (buf)
  	 (if (string= (buffer-name buf) "*Completions*") nil
  	   (save-excursion
  	     (set-buffer buf)
  	     (+ (count-lines (point-min) (point-max)) 1)))))
@end verbatim

This will cause empty buffers to have the minimum height, because
the maximum and minimum frame sizes (as specified in
@code{framepop-max-frame-size} and @code{framepop-min-frame-size}) are enforced
independently of @code{framepop-lines}. To get around this, define advice
around the function @code{framepop-frame-height}.

The default value of @code{framepop-lines} is framepop-default-lines.

@node Bugs,  , For elisp hackers, framepop
@section Bugs

@enumerate
@item
Completion in comint buffers doesn't work very well unless
comint-dynamic-show-completions is given a lobotomy.  NB: this happens
by default if @code{framepop-use-advice} is customized to @code{on}.
@item
I'd like to redefine framepop-wrap so that it saves the window
configuration, displays the requested buffer in the
framepop-frame, and then restores the window configuration. But
the job of framepop-wrap is better done by
special-display-buffer-names, so I shan't bother.
@end enumerate

@node highlight-beyond-fill-column, highlight-completion, framepop, Top
@chapter  highlight-beyond-fill-column - fontify beyond the fill-column.

This defines a function that can be used by @code{font-lock-add-keyword}' to
find the columns that are beyond @code{fill-column}'.  It does not currently
work in XEmacs because it lacks the function @code{font-lock-add-keywords}.

Enable it on a buffer using @code{M-x highlight-beyond-fill-column}.
You may use that command in a hook (e.g. @code{text-mode-hook}).

Use @code{customize-face highlight-beyond-fill-column-face} to to
setup the face used for highlight-beyond-fill-column.

@node highlight-completion, highlight-current-line, highlight-beyond-fill-column, Top
@chapter highlight-completion - completion with highlighted provisional text

This package modified how Emacs performs completions.  Ordinarily,
if you are typing a file name into the minibuffer (after hitting
@key{C-x C-f}, say), if you type a few letters and hit the TAB key, then
Emacs completes as far as possible.  For example, suppose the
directory contains only these files:
@example
   filbert   filibuster   frank   grunge.tex
@end example
If you type @key{g} followed by TAB, then @code{runge.tex} is
inserted.  If you hit @code{fi} then TAB, an @code{l}' is inserted.
If you hit @code{f} then TAB, there is no unique continuation of the
file name, so Emacs opens up a new window displaying the list of
possible completions.

That's the old system.  This package provides a variant: if you
type @key{g}, then @code{runge.tex} is automatically inserted as highlighted
text, to indicate that it's only provisional.  The point remains
immediately after the @code{g}.  If you hit TAB, the point jumps to the
end, and the added text is no longer highlighted.  (So if you
weren't looking at the screen, you wouldn't know that anything
different had happened.)  If after hitting @code{g}, you typed @code{a}
(because you wanted to find a new file 'gaptooth.el') the
highlighted text would disappear.  The effects of various keys:

@itemize @bullet
 @item @key{TAB}: jump forward to the end of the highlighted text.  If no
      text is highlighted, open up a window showing possible
      completions.

 @item @key{SPC}: jump forward a word (so 'g' followed by SPC would yield
      'grunge.tex', with the point after the '.', and with 'tex'
      highlighted).  If no text is highlighted, open up a window
      showing possible completions.

 @item @key{?}: open up a window showing possible completions.

 @item @key{RET}: open the named file (so 'g' followed by RET would open
      'grunge.tex').

 @item @key{C-g}: delete the highlighted text and stop this modified
      completion process (and exit the minibuffer, if you're in the
      minibuffer).

 @item @key{C-c}: delete the highlighted text and stop this modified
      completion process.

 @item @key{character}: if consistent with completion, unhighlight it and
      move the point forward.  if inconsistent, insert the
      character and delete the highlighted text, stopping this
      completion process.
@end itemize

@noindent Turn on highlight completion by either: running
@example
      M-x highlight-completion-mode
@end example
or customizing the variables in the group @code{highlight-completion}
and turn on "Highlight completion mode".  You may want to modify some
of the entries in "Highlight completion list".

@noindent You can also run the functions

@verbatim
     hc-completing-insert-file-name       to complete file names
     hc-completing-insert-lisp-function               lisp functions
     hc-completing-insert-lisp-variable               lisp variables
     hc-completing-insert-kill                        contents of kill ring
     hc-completing-insert-buffer-contents             buffer contents
     hc-ispell-complete-word                          words, using ispell
@end verbatim

These functions can be used anywhere, not just in the minibuffer.

@node highlight-current-line, home-end, highlight-completion, Top
@chapter highlight-current-line.el - highlight line where the cursor is

This is a minor mode to highlight the line the cursor is in. You can
change colors of foreground (text) and background. The default
behaviour is to set only a background color, so that font-lock
fontification colors remain visible (syntax coloring).

Enable it on a buffer using @code{M-x highlight-current-line-minor-mode} or
globally by customizing @code{highlight-current-line-globally}.  Customize
it via the @code{highlight-current-line} customization group.

You can select whether the whole line (from left to right window border)
is marked or only the really filled parts of the line (from left window
border to the last char in the line). The second behaviour is suitable
if it's important for you to see trailing spaces or tabs in a
line. Customize the variable @code{highlight-current-line-whole-line}.

You may enable the minor-mode automatically for (almost) all buffers by
customizing the variable @code{highlight-current-line-globally}.  Buffers
whose buffer-name match the regular expression in the customizable variable
@code{highlight-current-line-ignore-regexp} are not highlighted.  You can
extend or redefine this regexp. This works together with the default ignore
function @code{highlight-current-line-ignore-function}. You can redefine this
function to implement your own criterias.

@node home-end, htmlize, highlight-current-line, Top
@chapter home-end - Alternative Home and End key commands

Some useful bindings for Home and End keys:
@itemize @bullet
@item Hit the key once to go to the beginning/end of a line,
@item hit it twice in a row to go to the beginning/end of the window,
@item three times in a row goes to the beiginning/end of the buffer.
@end itemize

To enable it, customize the variable @code{home-end-enable}.

@node htmlize, ibuffer, home-end, Top
@chapter htmlize - HTML-ize font-lock buffers

This package analyses the text properties of the buffer and
converts them, along with the text, to HTML.  Mail to
<hniksic@@xemacs.org> to discuss features and additions.  All
suggestions are more than welcome.

To use, just switch to a buffer you want HTML-ized, and type @code{M-x
htmlize-buffer}.  After that, you should find yourself in an HTML
buffer, which you can save.  Alternatively, @code{M-x htmlize-file} will
find a file, font-lockify the buffer, and save the HTML version,
all before you blink.  Furthermore, @code{M-x htmlize-many-files} will
prompt you for a slew of files to undergo the same treatment.  @code{M-x
htmlize-many-files-dired} will do the same for the files marked by
dired.

The code attempts to generate compliant HTML, but I can't make any
guarantees; I haven't yet bothered to run the generated markup
through a validator.

For any of this to work, you need to run Emacs under a window-system
-- anything else will almost certainly fail.

@noindent The latest version should be available at:

       http://fly.srk.fer.hr/~hniksic/emacs/htmlize.el

@noindent You can find the sample htmlize output (run on an older version of
@file{htmlize.el}) at:

       http://fly.srk.fer.hr/~hniksic/emacs/htmlize.html

@node ibuffer, keydef, htmlize, Top
@chapter ibuffer - operate on buffers like dired

ibuffer.el is an advanced replacement for the `buffer-menu' which
is normally distributed with Emacs.  Its interface is intended to
be analogous to that of Dired.

Use @code{M-x ibuffer} to get started.  @key{h} will give a brief usage
description.

Just for fun, here is the author's favorite `ibuffer-formats'
configuration:

@verbatim
(setq ibuffer-formats '((mark modified read-only " " (name 16 16) " "
                        (size 6 -1 :right) " " (mode 16 16 :center)
                         " " (process 8 -1) " " filename)
                    	   (mark " " (name 16 -1) " " filename))
      ibuffer-elide-long-columns t
      ibuffer-eliding-string "&")
@end verbatim

Remember, you can switch between formats using
@code{ibuffer-switch-format}, bound to @key{`} by default.

In emacs-goodies-el, you can use the customize interface to bind
@code{ibuffer} to @key{\C-x\C-b} by customizing the variable
@code{ibuffer-enable}.

@node keydef, keywiz, ibuffer, Top
@chapter keydef - a simpler way to define keys, with kbd syntax

@noindent Author: Michael John Downes <mjd@@ams.org>

The macro keydef provides a simplified interface to define-key that
smoothly handles a number of common complications.

The global-set-key command isn't ideal for novices because of its
relatively complex syntax. And I always found it a little
inconvenient to have to quote the name of the command---that is, I
tend to forget the quote every once in a while and then have to go
back and fix it after getting a load error.

One of the best features is that you can give an Emacs lisp form (or
even a series of forms) as the key definition argument, instead of a
command name, and the keydef macro will automatically add an
interactive lambda wrapper. I use this to get, for example, a more
emphatic kill-buffer command (no confirmation query) by writing

@verbatim
  (keydef "<S-f11>" (kill-buffer nil))
@end verbatim

For keydef the key sequence is expected to be given uniformly in the
form of a string for the 'kbd' macro, with one or two refinements
that are intended to conceal from users certain points of confusion,
such as (for those whose keyboards lack a Meta key) the whole
Meta/ESC/escape muddle.

I have had some trouble in the past regarding the distinction
between ESC and [escape] (in a certain combination of circumstances
using the latter form caused definitions made with the other form to
be masked---most puzzling when I wasn't expecting it). Therefore the
ESC form is actually preprocessed a bit to ensure that the binding
goes into esc-map.

There is one other special feature of the key sequence syntax
expected by the keydef macro: You can designate a key definition for
a particular mode-map by giving the name of the mode together with
the key sequence string in list form, for example

@verbatim
  (keydef (latex "C-c %") comment-region)
@end verbatim

This means that the key will be defined in latex-mode-map. [The
point of using this particular example will be made clear below.] I
arranged for the mode name to be given in symbol form just because I
didn't want to have to type extra quotes if I could get away with
it. For the same reason this kind of first arg is not written in
dotted pair form.

If the given mode-map is not defined, keydef "does the right thing"
using eval-after-load. In order to determine what library the
mode-map will be loaded from, it uses the following algorithm:

First check if foo-mode has autoload information. If not, check
whether "foo-mode" is the name of a library that can be found
somewhere in the load-path (using locate-library); otherwise check
whether "foo" is the name of a locatable library. Failing that, give
up and return nil.

There is a fall-back mechanism, however, to handle exceptional
cases. If foo-mode-map is undefined but the list mode-map-alist
contains an entry of the form (foo-mode-map foo-other-name-map),
then foo-other-name-map is used as the name of the
keymap.

If the mode-map is not loaded yet AND the command being bound to a
key is undefined at the time of the keydef assignment, it presents
further problems. The simplest solution is to assume that after the
package is loaded that defines the mode-map, the given command will
be defined and satisfy commandp. With some extra effort it should be
possible to determine more accurately whether the command will be
defined or not, but I'm not sure I want to go to that extreme, since
as far as I can see it would require opening the package file and
searching through it for a matching defun/defalias/fset statement.

If the mode name matches the mode map name, but foo-mode is not
autoloaded, then some autoload information may need to be provided.
For example, the following line allows definitions to be made for
debugger-mode-map even before debug.el is loaded.

@verbatim
 (autoload 'debugger-mode "debug" "Autoloaded." 'interactive)
@end verbatim

Although there is no easy way provided by keydef for
gnus-summary-limit-map to be accessed directly, because
its name does not include "mode", you can get a binding into
such a map by writing

@verbatim
  (keydef (gnus-summary "/ z") gnus-summary-limit-to-zapped)
@end verbatim

which binds /z in gnus-summary-mode-map, which is equivalent to
binding z in gnus-summary-limit-map.

You might need to add an autoload statement for gnus-summary-mode
in order for this to work, so that keydef knows that it should use
eval-after-load and that the file the mode function will be loaded
from is called "gnus-sum" rather than "gnus-summary-mode". (If it
were the latter, keydef would be able to resolve everything
automatically.)

We COULD HAVE just put the definitions into the mode hook in the
standard way, instead of using eval-after-load, but that would mean
the key definitions get executed repetitiously every time the mode
function gets called, which seems better to avoid, if only for
esthetic reasons (if it can be done without too much trouble).

The following examples show some typical keydef lines followed by the
results of the macro expansion.

@noindent Simplest kind of definition:

@verbatim
(keydef "C-x m" gnus-group-mail)

  -->(define-key global-map (kbd "C-x m") (quote gnus-group-mail))
@end verbatim

@noindent What if the command name is misspelled?

@verbatim
(keydef "C-x m" gnus-gruop-mail)

  -->(message "keydef: gnus-gruop-mail unknown \
               \(perhaps misspelled, or not loaded yet\)")
@end verbatim

@noindent A leading ESC gets special handling to go through esc-map.

@verbatim
(keydef "ESC &" query-replace-regexp)

  -->(define-key esc-map (kbd "&") (quote query-replace-regexp))
@end verbatim

@noindent Undefine a key:

@verbatim
(keydef "ESC `")

  -->(define-key esc-map (kbd "`") nil)
@end verbatim

@noindent If the second arg is a string, keydef defines the given key sequence
as a keyboard macro. The following macro puts in TeX-style double
quotes and then moves the cursor backward to leave it in the middle:

@verbatim
(keydef "\"" "``''\C-b\C-b")

  -->(define-key global-map (kbd "\"") "``''\002\002")
@end verbatim

@noindent Reset a key to self-insert

@verbatim
(keydef "\"" "\"")

  -->(define-key global-map (kbd "\"") (quote self-insert-command))
@end verbatim

@noindent If the second arg is a list, wrap it in an interactive lambda form.

@verbatim
(keydef "C-z"
  (message "Control-Z key disabled---redefine it if desired."))

  -->(define-key global-map
      (kbd "C-z")
      (lambda (arg)
        "anonymous keydef function"
        (interactive "p")
        (message "Control-Z key disabled---redefine it if desired.")))
@end verbatim

Note that the interactive lambda wrapper added by keydef, when the
CMD does not satisfy commandp, always takes a single prefix argument
named "arg", which is read in the usual way with (interactive "p");
so this could be used in the body of the function if need be.

@noindent This shows the notation for F-keys.

@verbatim
(keydef "<C-f17>" (kill-buffer nil))

  -->(define-key global-map
      (kbd "<C-f17>")
      (lambda (arg)
        "*Anonymous function created by keydef."
        (interactive "p")
        (kill-buffer nil)))
@end verbatim

Because of the confusing Meta/Escape complications, I recommend to
the users that I support that they use the ESC notation
consistently if that is what they type from their keyboard, even
for F-key definitions that might normally be written with <M-...>
notation.

@verbatim
(keydef "ESC <f3>" find-file-read-only)

  -->(define-key esc-map (kbd "<f3>") (quote find-file-read-only))
@end verbatim

@noindent The next two definitions go together. The second one shows how to
write a mode-specific definition.

@verbatim
(keydef "<f5>" isearch-forward)

  -->(define-key global-map (kbd "<f5>") (quote isearch-forward))

(keydef (isearch "<f5>") isearch-repeat-forward)

  -->(define-key isearch-mode-map (kbd "<f5>")
                                  (quote isearch-repeat-forward))
@end verbatim

@noindent Making a definition for a mode-map that is not loaded yet.

@verbatim
(keydef (latex "C-c %") comment-region)

  -->(eval-after-load "tex-mode"
       (quote
        (define-key latex-mode-map
          (kbd "C-c %")
          (quote comment-region))))
@end verbatim

@node keywiz, map-lines, keydef, Top
@chapter keywiz - Emacs key sequence quiz

@noindent Author: Jesper Harder <harder@@ifa.au.dk>

keywiz.el drills you about Emacs key-bindings.  You're presented
with the name of a command and the docstring, and then prompted for
the correct key sequence.  You'll earn one point for each correct
answer during the time limit.

Invoke with @command{M-x keywiz}.  A prefix argument will force keywiz
to rescan the key-binding -- this is useful if you want to include
bindings from a different mode.

Are you a true Emacs key-binding wizard or just a poor vi looser?
Get your foot-pedals in position and see how many key-bindings you
can remember in two minutes.

Forget about your Nethack high-score -- surely, knowing how to
wield the powers of the One True Editor at your fingertips will
earn you more bragging rights than ascending bare-footed in some
silly game with vi-keybindings :-)

@node map-lines, mutt-alias, keywiz, Top
@chapter map-lines - Map a command over many lines

@noindent Author: Andreas Fuchs <asf@@void.at>

This module allows you to map a command over a set of lines
matching a regex. The trick: You can then go ahead and insert these
lines in one clean yank.  It's good for kill a bunch of lines in one
go, or collecting a bunch of lines in the kill-ring ready to paste.

@verbatim
<flamebait>Emacs can now be called ED, THE STANDARD TEXT EDITOR
</flamebait>
@end verbatim

Invoke it with @command{M-x map-lines}.

@node mutt-alias, muttrc-mode, map-lines, Top
@chapter mutt-alias - Lookup/insert mutt mail aliases.

@noindent Author: Dave Pearson <davep@@davep.org>

mutt-alias allows you to lookup and insert the expansion of mutt mail
aliases. This is only handy if you use mutt @url{http://www.mutt.org/}.

The following commands are available:

@table @samp
@item mutt-alias-insert
Insert the expansion for ALIAS into the current buffer.
@item mutt-alias-lookup
Lookup and display the expansion for ALIAS.
@end table

@node muttrc-mode, newsticker, mutt-alias, Top
@chapter muttrc-mode - Major mode to edit muttrc under Emacs

@noindent Author: Laurent Pelecq <laurent.pelecq@@soleil.org>

This mode first goal is to provide syntax highlighting with
font-lock. The basic fontification appears on strings, comments,
command names and variables. Additional fontification for commands
arguments can be enabled through the customization buffer.

To customize it, execute @command{M-x configure-group RET muttrc RET}

By default, help on command/variable is displayed automatically
while executing a command to modify them. Disable this feature if
you have problems with.

The main commands are:

@table @samp
@item C-x c
muttrc-insert-command
@item C-x s
muttrc-set-variable
@item C-x S
muttrc-unset-variable
@end table

Type @key{C-h m} for all key bindings.

@noindent BUGS:

Multiline commands are not properly handled and can lead to unexpected
result.

@node newsticker, nuke-trailing-whitespace, muttrc-mode, Top
@chapter newsticker - A Newsticker for Emacs.

@noindent Copyright (C) 2003 by Ulf Jasper

This package provides a newsticker for Emacs.  A newsticker is a thing
that asynchronously retrieves a list of headlines (which are contained
in RDF Site Summary (RSS) files) from a list of news sites, displays
these headlines, and allows for loading the corresponding articles in
a web browser.

This package should work with all RSS files that follow the "RDF Rich
Site Summary (RSS) 1.0" specification (see
@url{http://purl.org/rss/1.0/spec}).  It may also work with
other/older/alternative rss formats (like 0.9<something> or such).

This package requires wget for retrieving headlines asynchronously.

Headlines can be displayed in the echo area, but they will show only
if no other program is using the echo area (and minibuffer).
Besides, headlines and their descriptions are collected in a buffer
called *newsticker*.

To use, do @command{M-x newsticker-start}.  This will retrieve
headlines from each url in @code{newsticker-url-list-defaults} and
@code{newsticker-url-list} every @code{newsticker-retrieval-interval}
seconds.  All headlines are placed in the buffer @code{*newsticker*}.
Clicking @key{mouse-button-2} or pressing @key{RET} in that buffer on
a headline will call @command{browse-url} to load the corresponding
news story in your favourite web browser.

Every @code{newsticker-display-interval} a headline is shown in the
echo area (if @code{newsticker-display-interval} is positive).

In order to stop the newsticker say @command{M-x newsticker-stop}.
This will stop all timers.

The function @command{newsticker-show-news} will update the
\*newsticker* buffer, if necessary, and recreate it if you accidentally
deleted it.  The modeline will indicate whether the *newsticker*
buffer is up to date with the newsticker-cache.

Newsticker-mode extends @command{outline-mode} so that you can easily
hide and show descriptions of feeds and news items.

Newsticker-mode supports imenu.  It allows for navigating with the
help of a menu.  In order to use this feature you should add the
following to you .emacs file:

@example
  (add-hook 'newsticker-mode-hook 'imenu-add-menubar-index)
@end example

All newsticker-options are customizable.  Do @command{M-x customize-group
@key{RET} newsticker @key{RET}} in order to customize the newsticker settings.

Enjoy!

PS: This newsticker is designed do its job silently in the
    background without disturbing you.  However, it is probably
    impossible to prevent such a tool from slightly attenuating your
    Editor's responsiveness every once in a while.

@node nuke-trailing-whitespace, obfusurl, newsticker, Top
@chapter nuke-trailing-whitespace - Strip trailing whitespace from buffers

@noindent Author: Noah Friedman <friedman@@splode.com>

This package strips trailing whitespace from buffers.  It can be used
manually on a buffer by calling @code{M-x nuke-trailing-whitespace} when
editing a buffer, or automatically when you save a file.

For automatic stripping of files as you save them (or email messages as
you send them), either add the following in your .emacs:

@verbatim
    (autoload 'nuke-trailing-whitespace "nuke-trailing-whitespace" nil t)
    (add-hook 'mail-send-hook 'nuke-trailing-whitespace)
    (add-hook 'write-file-hooks 'nuke-trailing-whitespace)
@end verbatim

or better yet accomplish the same effect by customizing the variable
@code{nuke-trailing-whitespace-in-hooks} and saving the result for
future sessions.

By default, buffers that have a major-mode listed in the customizable
list @code{nuke-trailing-whitespace-always-major-modes} are stripped, those
listed in the list @code{nuke-trailing-whitespace-never-major-modes} are not,
and others are prompted for.  You can change this default behaviour by
customizing the variable @code{nuke-trailing-whitespace-p}.

@noindent See also: whitespace.el packaged in Emacs-21

@node obfusurl, perldoc, nuke-trailing-whitespace, Top
@chapter obfusurl - Obfuscate URLs so they aren't spoilers

@noindent Author: Dave Pearson <davep@@davep.org>

obfusurl.el provides @command{obfuscate-url}, a command that will obfuscate an
URL under the cursor. This might be useful if you are writing out an URL
for someone but the URL itself might spoil the surprise.

@noindent For example, this:

@example
<URL:http://www.davep.org/emacs/>
@end example

is turned into this:

@example
<URL:http://www.davep.org/%65%6d%61%63%73/>
@end example

@node perldoc, protbuf, obfusurl, Top
@chapter perldoc - Show help for Perl functions, builtins, and modules.

@noindent Author: Steve Kemp <skx@@tardis.ed.ac.uk>

This package allows the user to view the Perl help for the word(s) at
the point.

Customize the variable @code{perldoc-define-F1} to @code{on} to bind
the key @key{F1} to show point for the item under point in
@code{cperl-mode} and @code{perl-mode}.

The code handles functions, builtins, and third party modules.

@node protbuf, session, perldoc, Top
@chapter protbuf - Protect buffers from accidental killing

@noindent Author: Noah Friedman <friedman@@splode.com>

This package allows you to make it harder to kill buffers accidentally,
e.g. by being too trigger happy selecting items in the buffer menu.

@noindent The commands are:

@table @samp
@item protect-buffer-from-kill-mode
Toggle @code{kill-buffer} protection on current buffer.
@item protect-process-buffer-from-kill-mode
Toggle @code{kill-buffer} protection on current buffer with active process.
@end table

@command{protect-process-buffer-from-kill-mode} is perhaps the more
useful of the two, making it harder to accidentally kill shell buffers
without terminating the process in them first.


@node session,  , protbuf, Top
@chapter session - Session Management for Emacs

When you start Emacs, package Session restores various variables (e.g.,
input histories) from your last session. It also provides a menu containing
recently changed/visited files and restores the places (e.g., point) of
such a file when you revisit it.

To enable this package, customize the group @code{session} and within
it the variable @code{session-initialize} and save the settings.

To restore the variables, this package writes a session file (~/.session)
when you exit Emacs. The file includes the values of variables which are
automatically updated by Emacs during some editing operations:

@itemize @bullet
@item Histories of user input. For example, strings used in a find/replace
command, names of files you have visited, etc.

@item Contents of registers, whether they are texts or buffer/file
positions. Buffer positions are automatically converted to file positions.

@item List of recently copied/cut text blocks to paste, global markers to
jump to, and other so-called rings.

@item List of recently changed files with their places and some buffer-local
variables.
@end itemize

To restore the places of a recently changed/visited file when you revisit
it, this packages stores the places of a buffer in a special variable (the
list mentioned above) when you kill that buffer (this includes exiting
Emacs). Places are:

@itemize @bullet
@item Point (the cursor position) and mark (e.g., the opposite position
when a region is highlighted). These places will be restored, but a region
won't be made active.

@item The position of the last change. A new command (bound to @key{C-x
C-/}) can be used to jump to that position.

@item The boundaries if only a part of a buffer was visible. Reopening the
file will again restrict/narrow the editing operations to that region.

@item Values of buffer-local variables. Useful for variables which control some
temporary editing behavior, e.g., overwrite-mode.
@end itemize

As opposed to desktop.el and other packages, Session does not automatically
revisits all files from your last session, most of which are not
interesting anymore.


Details of Package Session

@menu
* Session Menus and Key-Bindings::  
* Saving Session Variables::    
* Storing Buffer Places::       
@end menu

@node Session Menus and Key-Bindings, Saving Session Variables, session, session
@section Session - Menus and Key-Bindings

For Emacs-21.1+ and XEmacs, this package defines the following menu entries
and key-bindings:

@itemize @bullet
@item
At the beginning of menu File, there are two new submenus:
@code{Open...recently changed} and @code{Open...recently visited}.

@item
In menu Edit, there is a new submenu: @code{Select and Paste}, it already
exists in Emacs-21+. With XEmacs, using the right mouse button @key{C-button3}
also pops up this submenu.

@item
Enter @key{C-x C-/} or @key{C-x Undo} to jump to the position of the last
change (use repeatedly or with prefix argument for earlier positions).

@item
In the minibuffer, enter @key{M-?} to display a completion list with all
strings in the history for the current minibuffer input. From that list,
you can use @key{button2} to select an entry.

@end itemize

@node Saving Session Variables, Storing Buffer Places, Session Menus and Key-Bindings, session
@section Session - Saving Session Variables

There are various ways to control which lists/variables are saved in the
session file and which elements in a list are included in the saved value:

@itemize @bullet
@item The variables to store can be specified by a regular expression
matching their names, and by an include/exclude list.

@item
Variables containing empty lists are not stored. You do not want to clutter
up your session file...

@item
Long lists can be truncated. A maximum length can be specified globally and
individually for single variables.

@item
If there are equal elements in the list, only the first is saved. Long
strings in a list can be excluded by specifying a maximal string length.

@item
Elements in a list which have no readable representation (e.g., events in
the command history) are automatically dropped.

@item
To exit Emacs without writing a session file, use prefix argument 0: enter
@key{C-u 0 C-x C-c}.

@end itemize

Technical detail: documentation of command session-save-session.

Note: you cannot share the same session file between Emacs and XEmacs
(different coding systems, different types for the same variables, ?).

@node Storing Buffer Places,  , Saving Session Variables, session
@section Session - Storing Buffer Places

Since not all buffers/files are of permanent interest, there are various
conditions and means to control for which buffers to store some places:

@itemize @bullet
@item
The buffer must visit a readable file. There are variables to exclude or
include buffers due to their major mode or buffer file name.

@item
By default, the contents must have been changed. You still have the places
from previous Emacs sessions, but that information is older and thus more
likely to be truncated from the list of saved buffer places (see above).

@item
Individual control by providing a prefix argument to command @command{M-x
kill-this-buffer} (@key{C-u 2} or higher: store places, @key{C-u 0} or
lower: don't store places).

@item
A file/buffer can be marked as permanent, i.e., its places will always be
stored. Use @command{M-x session-toggle-permanent-flag} or select the
corresponding menu item in the new submenu @code{Open...recently changed}.

@end itemize
